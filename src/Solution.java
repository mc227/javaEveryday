/*
Creating threads recursively
1. Change the GenerateThread class to make it a thread.
2. Create a GenerateThread constructor, which must:
2.1. Call the superclass's constructor, passing the created thread's number as a String. Use createdThreadCount.
2.2. Start the current thread.
2.3. The thread numbers must start with 1.
3. Override the toString method: inside GenerateThread, use Alt+Insert -> Override Methods. Start typing "toString".
3.1. The toString method must return the current thread number and the word "created". Use getName().

Example:
8 created

4. If the number of created threads is less than Solution.count, the run method must:
4.1. Create a new GenerateThread.
4.2. Display the thread created in Item 4.1.
5. In the end, 15 lines should be output to the console.


Requirements:
1. The GenerateThread class should inherit the Thread class.
2. The GenerateThread class must have a public no-argument constructor.
3. The GenerateThread class constructor should increment createdThreadCount and pass it as a string to the superclass constructor.
4. The GenerateThread class constructor must start the thread.
5. The GenerateThread class's toString method must return the thread name and the word " created". Example: "8 created".
6. If the number of created threads is less than Solution.count, the run method must create a new GenerateThread.
7. If the number of created threads is less than Solution.count, the run method must display the created thread.
8. The program's output must match the task conditions and indicate that all 15 threads have been created.
* */
public class Solution {
    static int count = 15;
    static volatile int createdThreadCount;

    public static void main(String[] args) {
        System.out.println(new GenerateThread());
    }

    public static class GenerateThread extends Thread{

        public GenerateThread() {
            super(String.valueOf(++createdThreadCount));
            start();
        }

        @Override
        public String toString() {
            return getName() + " created";
        }

        @Override
        public void run() {

            if(createdThreadCount < Solution.count) {
                System.out.println(new GenerateThread());
            }

        }
    }
}


//import java.util.ArrayList;
//import java.util.List;
//
///*
//Horse racing
//*/
//
//public class Solution {
//
//    public static void main(String[] args) throws InterruptedException {
//        List<Horse> horses = prepareHorsesAndStart(10);
//        while (calculateHorsesFinished(horses) != horses.size()) {
//        }
//    }
//
//    public static int calculateHorsesFinished(List<Horse> horses) throws InterruptedException {
//        int finishedCount = 0;
//        //write your code here
//        for (Horse horse: horses) {
//            if (!horse.isFinished()) {
//                System.out.println( "Waiting for " + horse.getName());
//                horse.join();
//            } else {
//                finishedCount = finishedCount + 1;
//            }
//
//        }
//        return finishedCount;
//    }
//
//    public static List<Horse> prepareHorsesAndStart(int horseCount) {
//        List<Horse> horses = new ArrayList<>(horseCount);
//        String number;
//        for (int i = 1; i < horseCount + 1; i++) {
//            number = i < 10 ? ("0" + i) : "" + i;
//            horses.add(new Horse("Horse_" + number));
//        }
//
//        for (int i = 0; i < horseCount; i++) {
//            horses.get(i).start();
//        }
//        return horses;
//    }
//
//    public static class Horse extends Thread {
//
//        private boolean isFinished;
//
//        public Horse(String name) {
//            super(name);
//        }
//
//        public boolean isFinished() {
//            return isFinished;
//        }
//
//        public void run() {
//            String s = "";
//            for (int i = 0; i < 1001; i++) {   // Delay
//                s += "" + i;
//                if (i == 1000) {
//                    s = " has finished the race!";
//                    System.out.println(getName() + s);
//                    isFinished = true;
//                }
//            }
//        }
//    }
//}
//
//
////import java.util.ArrayList;
////import java.util.List;
////
////public class Solution {
////    public static void main(String[] args) throws InterruptedException {
////        OnlineGame onlineGame = new OnlineGame();
////        onlineGame.start();
////    }
////
////    public static class OnlineGame extends Thread {
////        public static volatile boolean isWinnerFound = false;
////
////        public static List<String> actions = new ArrayList<>();
////
////        static {
////            actions.add("Start game");
////            actions.add("Gather resources");
////            actions.add("Grow economy");
////            actions.add("Kill enemies");
////        }
////
////        protected Gamer gamer1 = new Gamer("Smith", 3);
////        protected Gamer gamer2 = new Gamer("Jones", 1);
////        protected Gamer gamer3 = new Gamer("Gates", 5);
////
////        public void run() {
////            gamer1.start();
////            gamer2.start();
////            gamer3.start();
////
////            while (!isWinnerFound) {
////            }
////            gamer1.interrupt();
////            gamer2.interrupt();
////            gamer3.interrupt();
////        }
////    }
////
////    public static class Gamer extends Thread {
////        private int rating;
////
////        public Gamer(String name, int rating) {
////            super(name);
////            this.rating = rating;
////        }
////
////        @Override
////        public void run() {
////            //write your code here
////            for(String action: OnlineGame.actions){
////                try {
////                    Thread.sleep((long) 1000/rating);
////                    System.out.println(getName()+":"+action);
////                } catch (InterruptedException e) {
////                    System.out.println(getName()+":lost");
////                    return;
////                }
////            }
////            if (OnlineGame.isWinnerFound == false) {
////                OnlineGame.isWinnerFound = true;
////                System.out.println(getName()+":won!");
////            }
////        }
////    }
////}
////
////
//////import java.util.ArrayList;
//////import java.util.List;
//////
//////public class Solution {
//////    public static void main(String[] args) throws InterruptedException {
//////        OnlineGame onlineGame = new OnlineGame();
//////        onlineGame.start();
//////    }
//////
//////    public static class OnlineGame extends Thread {
//////        public static volatile boolean isWinnerFound = false;
//////
//////        public static List<String> actions = new ArrayList<>();
//////
//////        static {
//////            actions.add("Start game");
//////            actions.add("Gather resources");
//////            actions.add("Grow economy");
//////            actions.add("Kill enemies");
//////        }
//////
//////        protected Gamer gamer1 = new Gamer("Smith", 3);
////////        protected Gamer gamer2 = new Gamer("Jones", 1);
////////        protected Gamer gamer3 = new Gamer("Gates", 5);
//////
//////        public void run() {
//////            gamer1.start();
////////            gamer2.start();
////////            gamer3.start();
//////
//////            while (!isWinnerFound) {
//////            }
//////            gamer1.interrupt();
////////            gamer2.interrupt();
////////            gamer3.interrupt();
//////        }
//////    }
//////
//////    public static class Gamer extends Thread {
//////        private int rating;
//////
//////        public Gamer(String name, int rating) {
//////            super(name);
//////            this.rating = rating;
//////        }
//////
//////        @Override
//////        public void run() {
//////            //write your code here
//////            for(String action: OnlineGame.actions){
//////                try {
//////                    Thread.sleep((long) 1000/rating);
//////                    System.out.println(getName()+":"+action);
//////                } catch (InterruptedException e) {
//////                    return;
//////                }
//////            }
//////            OnlineGame.isWinnerFound = true;
//////            System.out.println(getName()+":won!");
//////        }
//////    }
//////}
//////
////
//////public class Solution {
//////    public static void main(String[] args) {
//////        System.out.println("Oh Hi Mark");
//////    }
//////}
////
//////import java.io.BufferedReader;
//////import java.io.IOException;
//////import java.io.InputStreamReader;
//////import java.util.ArrayList;
//////import java.util.List;
//////import java.util.concurrent.atomic.AtomicInteger;
//////
//////public class Solution {
//////    public static volatile AtomicInteger readStringCount = new AtomicInteger(0);
//////    public static volatile BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
//////
//////    public static void main(String[] args) throws IOException {
//////        // Read string count
//////        int count = Integer.parseInt(reader.readLine());
//////
//////        // Init threads
//////        ReaderThread consoleReader1 = new ReaderThread();
//////        ReaderThread consoleReader2 = new ReaderThread();
//////        ReaderThread consoleReader3 = new ReaderThread();
//////
//////        consoleReader1.start();
//////        consoleReader2.start();
//////        consoleReader3.start();
//////
//////        while (count > readStringCount.get()) {
//////        }
//////
//////        consoleReader1.interrupt();
//////        consoleReader2.interrupt();
//////        consoleReader3.interrupt();
//////        System.out.println("#1:" + consoleReader1);
//////        System.out.println("#2:" + consoleReader2);
//////        System.out.println("#3:" + consoleReader3);
//////
//////        reader.close();
//////    }
//////
//////    public static class ReaderThread extends Thread {
//////        private List<String> result = new ArrayList<>();
//////
//////        public void run() {
//////            //write your code here
//////            while (!Thread.currentThread().isInterrupted()) {
//////                try {
//////                    String line = reader.readLine();
//////                    if (line !=null) {
//////                        result.add(line);
//////                        readStringCount.addAndGet(1);
//////                    }
//////                } catch (IOException e) {}
//////            }
//////        }
//////
//////        @Override
//////        public String toString() {
//////            return result.toString();
//////        }
//////    }
//////}
//////
//////
////////import java.io.BufferedReader;
////////import java.io.IOException;
////////import java.io.InputStreamReader;
////////import java.util.ArrayList;
////////import java.util.List;
////////import java.util.concurrent.atomic.AtomicInteger;
////////
////////public class Solution {
////////    public static volatile AtomicInteger readStringCount = new AtomicInteger(0);
////////    public static volatile BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
////////
////////    public static void main(String[] args) throws IOException {
////////        // Read string count
////////        int count = Integer.parseInt(reader.readLine());
////////
////////        // Init threads
////////        ReaderThread consoleReader1 = new ReaderThread();
////////        ReaderThread consoleReader2 = new ReaderThread();
////////        ReaderThread consoleReader3 = new ReaderThread();
////////
////////        consoleReader1.start();
////////        consoleReader2.start();
////////        consoleReader3.start();
////////
////////        while (count > readStringCount.get()) {
////////        }
////////
////////        consoleReader1.interrupt();
////////        consoleReader2.interrupt();
////////        consoleReader3.interrupt();
////////        System.out.println("#1:" + consoleReader1);
////////        System.out.println("#2:" + consoleReader2);
////////        System.out.println("#3:" + consoleReader3);
////////
////////        reader.close();
////////    }
////////
////////    public static class ReaderThread extends Thread {
////////        private List<String> result = new ArrayList<>();
////////
////////        public void run() {
////////            //write your code here
////////            while (!Thread.currentThread().isInterrupted()) {
////////                try {
////////                    result.add(reader.readLine());
////////                    readStringCount.addAndGet(1);
////////                } catch (IOException e) {
////////                    e.printStackTrace();
////////                }
////////            }
////////        }
////////
////////        @Override
////////        public String toString() {
////////            return result.toString();
////////        }
////////    }
////////}
////////
//////////package com.codegym.task.task16.task1628;
//////////
//////////import java.io.BufferedReader;
//////////import java.io.IOException;
//////////import java.io.InputStreamReader;
//////////import java.util.ArrayList;
//////////import java.util.List;
//////////import java.util.concurrent.atomic.AtomicInteger;
//////////
//////////public class Solution {
//////////    public static volatile AtomicInteger readStringCount = new AtomicInteger(0);
//////////    public static volatile BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
//////////
//////////    public static void main(String[] args) throws IOException {
//////////        // Read string count
//////////        int count = Integer.parseInt(reader.readLine());
//////////
//////////        // Init threads
//////////        ReaderThread consoleReader1 = new ReaderThread();
//////////        ReaderThread consoleReader2 = new ReaderThread();
//////////        ReaderThread consoleReader3 = new ReaderThread();
//////////
//////////        consoleReader1.start();
//////////        consoleReader2.start();
//////////        consoleReader3.start();
//////////
//////////        while (count > readStringCount.get()) {
//////////        }
//////////
//////////        consoleReader1.interrupt();
//////////        consoleReader2.interrupt();
//////////        consoleReader3.interrupt();
//////////        System.out.println("#1:" + consoleReader1);
//////////        System.out.println("#2:" + consoleReader2);
//////////        System.out.println("#3:" + consoleReader3);
//////////
//////////        reader.close();
//////////    }
//////////
//////////    public static class ReaderThread extends Thread {
//////////        private List<String> result = new ArrayList<>();
//////////
//////////        public void run() {
//////////            //write your code here
//////////            while (!Thread.currentThread().isInterrupted()) {
//////////                try {
//////////                    result.add(reader.readLine());
//////////                    readStringCount.addAndGet(1);
//////////                } catch (IOException e) {
//////////                    e.printStackTrace();
//////////                }
//////////            }
//////////        }
//////////
//////////        @Override
//////////        public String toString() {
//////////            return result.toString();
//////////        }
//////////    }
//////////}
//////////
//////////
////////////import java.io.BufferedReader;
////////////import java.io.IOException;
////////////import java.io.InputStreamReader;
////////////import java.util.ArrayList;
////////////import java.util.List;
////////////import java.util.concurrent.atomic.AtomicInteger;
////////////
////////////public class Solution {
////////////    public static volatile AtomicInteger readStringCount = new AtomicInteger(0);
////////////    public static volatile BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
////////////
////////////    public static void main(String[] args) throws IOException {
////////////        // Read string count
////////////        int count = Integer.parseInt(reader.readLine());
////////////
////////////        // Init threads
////////////        ReaderThread consoleReader1 = new ReaderThread();
////////////        ReaderThread consoleReader2 = new ReaderThread();
////////////        ReaderThread consoleReader3 = new ReaderThread();
////////////
////////////        consoleReader1.start();
////////////        consoleReader2.start();
////////////        consoleReader3.start();
////////////
////////////        while (count > readStringCount.get()) {
////////////        }
////////////
////////////        consoleReader1.interrupt();
////////////        consoleReader2.interrupt();
////////////        consoleReader3.interrupt();
////////////        System.out.println("#1:" + consoleReader1);
////////////        System.out.println("#2:" + consoleReader2);
////////////        System.out.println("#3:" + consoleReader3);
////////////
////////////        reader.close();
////////////    }
////////////
////////////    public static class ReaderThread extends Thread {
////////////        private List<String> result = new ArrayList<>();
////////////
////////////        public void run() {
////////////            //write your code here
////////////        }
////////////
////////////        @Override
////////////        public String toString() {
////////////            return result.toString();
////////////        }
////////////    }
////////////}
////////////
////////////
//////////////import java.io.*;
//////////////
//////////////import static java.lang.System.in;
//////////////
//////////////public class Solution {
//////////////    public static String firstFileName;
//////////////    public static String secondFileName;
//////////////
//////////////    //write your code here
//////////////    static {
//////////////        try {
//////////////            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
//////////////            firstFileName = bufferedReader.readLine();
//////////////            secondFileName = bufferedReader.readLine();
//////////////        } catch (IOException e) {}
//////////////    }
//////////////
//////////////    public static void main(String[] args) throws InterruptedException, IOException {
//////////////        systemOutPrintln(firstFileName);
//////////////        systemOutPrintln(secondFileName);
//////////////    }
//////////////
//////////////    public static void systemOutPrintln(String fileName) throws InterruptedException, IOException {
//////////////        ReadFileInterface f = new ReadFileThread();
//////////////        f.setFileName(fileName);
//////////////        f.start();
//////////////        //write your code here
//////////////        f.join();
//////////////        System.out.println(f.getFileContents());
//////////////    }
//////////////
//////////////    public interface ReadFileInterface {
//////////////
//////////////        void setFileName(String fullFileName);
//////////////
//////////////        String getFileContents() throws IOException;
//////////////
//////////////        void join() throws InterruptedException;
//////////////
//////////////        void start();
//////////////    }
//////////////
//////////////
//////////////    public static class ReadFileThread extends Thread implements ReadFileInterface{
//////////////        private String fileName;
//////////////        private String fileContents ="";
//////////////
//////////////        public void setFileName(String fullFileName) {
//////////////            this.fileName = fullFileName;
//////////////        }
//////////////
//////////////        public String getFileContents(){
//////////////            return fileContents;
//////////////        }
//////////////
//////////////        public void run(){
//////////////            try {
//////////////                BufferedReader br = new BufferedReader(new FileReader(this.fileName));
//////////////
//////////////                while (br.ready()) {
//////////////                    String line = br.readLine();
//////////////                    fileContents += line + " ";
//////////////                }
//////////////                br.close();
//////////////            } catch (IOException e){
//////////////                e.getMessage();
//////////////            }
//////////////        }
//////////////
//////////////    }
//////////////
//////////////    //write your code here
//////////////}
//////////////
//////////////
//////////////
/////////////////*
////////////////* Factory method pattern
////////////////* com.codegym.task.task16.task1631;
////////////////* */
////////////////
////////////////public class Solution {
////////////////    public static void main(String[] args) {
////////////////        ImageReader reader = ImageReaderFactory.getImageReader(ImageTypes.JPG);
////////////////    }
////////////////}
////////////////
////////////////
////////////////
//////////////////
//////////////////import java.io.BufferedReader;
//////////////////import java.io.IOException;
//////////////////import java.io.InputStreamReader;
//////////////////import java.util.ArrayList;
//////////////////import java.util.List;
//////////////////
//////////////////public class Solution {
//////////////////    public static List<Thread> threads = new ArrayList<>(5);
//////////////////
//////////////////    static {
//////////////////        threads.add(new Thread1("1"));
//////////////////        threads.add(new Thread2("2"));
//////////////////        threads.add(new Thread3("3"));
//////////////////        threads.add(new Thread4("4"));
//////////////////        threads.add(new Thread5("5"));
//////////////////    }
//////////////////    public static void main(String[] args) {
//////////////////
//////////////////    }
//////////////////
//////////////////    public static class Thread1 extends Thread {
//////////////////        public Thread1(String name) {
//////////////////            super(name);
//////////////////        }
//////////////////
//////////////////        public void run() {
//////////////////            while (true) {}
//////////////////        }
//////////////////    }
//////////////////
//////////////////    public static class Thread2 extends Thread {
//////////////////        Thread current = Thread.currentThread();
//////////////////        public Thread2(String name) {
//////////////////            super(name);
//////////////////        }
//////////////////
//////////////////        public void run() {
//////////////////            while (!current.isInterrupted())
//////////////////            {
//////////////////                try {
//////////////////                    throw new InterruptedException();
//////////////////                } catch (InterruptedException e) {
//////////////////                    System.out.println("InterruptedException");
//////////////////                }
//////////////////            }
//////////////////        }
//////////////////    }
//////////////////
//////////////////    public static class Thread3 extends Thread {
//////////////////        Thread current = Thread.currentThread();
//////////////////        public Thread3(String name) {
//////////////////            super(name);
//////////////////        }
//////////////////
//////////////////        public void run() {
//////////////////            while (!current.interrupted())
//////////////////            {
//////////////////                try {
//////////////////                    System.out.println("Hurray");
//////////////////                    Thread.sleep(500);
//////////////////                } catch (InterruptedException e) {
//////////////////                    e.printStackTrace();
//////////////////                }
//////////////////            }
//////////////////        }
//////////////////    }
//////////////////
//////////////////    public static class Thread4 extends Thread implements Message {
//////////////////
//////////////////        public Thread4(String name) { super(name);}
//////////////////
//////////////////        @Override
//////////////////        public void run() {
//////////////////            while(isAlive()){
//////////////////
//////////////////            }
//////////////////        }
//////////////////        @Override
//////////////////        public void showWarning() {
//////////////////            this.stop();
//////////////////        }
//////////////////    }
//////////////////
//////////////////    public static class Thread5 extends Thread {
//////////////////
//////////////////        public Thread5(String name) {
//////////////////            super(name);
//////////////////        }
//////////////////        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
//////////////////        int sum=0;
//////////////////        @Override
//////////////////        public void run() {
//////////////////            while (true){
//////////////////                String num = null;
//////////////////                try {
//////////////////                    num = reader.readLine();
//////////////////                } catch (IOException e) {
//////////////////                    e.printStackTrace();
//////////////////                }
//////////////////                if(num.equals("N")){
//////////////////
//////////////////                    System.out.println(sum);
//////////////////                    break;
//////////////////                }
//////////////////                else {
//////////////////                    sum+=(Integer.parseInt(num));
//////////////////                }
//////////////////            }
//////////////////        }
//////////////////
//////////////////    }
//////////////////
//////////////////}
//////////////////
////////////////////import java.util.ArrayList;
////////////////////import java.util.List;
////////////////////
/////////////////////*
////////////////////One for all, all for one
////////////////////
////////////////////*/
////////////////////
////////////////////public class Solution {
////////////////////    public static byte threadCount = 3;
////////////////////    static List<Thread> threads = new ArrayList<>(threadCount);
////////////////////
////////////////////    public static void main(String[] args) throws InterruptedException {
////////////////////        initThreadsAndStart();
////////////////////        Thread.sleep(2000);
////////////////////        ourInterrupt();
////////////////////    }
////////////////////
////////////////////    public static void ourInterrupt() {
////////////////////        //write your code here
////////////////////        threads.get(0).interrupt();
////////////////////        threads.get(1).interrupt();
////////////////////        threads.get(2).interrupt();
////////////////////    }
////////////////////
////////////////////    private static void initThreadsAndStart() {
////////////////////        Water water = new Water("water");
////////////////////        for (int i = 0; i < threadCount; i++) {
////////////////////            threads.add(new Thread(water, "#" + i));
////////////////////        }
////////////////////
////////////////////        for (int i = 0; i < threadCount; i++) {
////////////////////            threads.get(i).start();
////////////////////        }
////////////////////    }
////////////////////
////////////////////    public static class Water implements Runnable {
////////////////////        private String sharedResource;
////////////////////
////////////////////        public Water(String sharedResource) {
////////////////////            this.sharedResource = sharedResource;
////////////////////        }
////////////////////
////////////////////        public void run() {
////////////////////            //fix 2 variables
////////////////////            boolean isCurrentThreadInterrupted = false;
////////////////////            String threadName = Thread.currentThread().getName();
////////////////////
////////////////////            try {
////////////////////                while (!isCurrentThreadInterrupted) {
////////////////////
////////////////////                    System.out.println("Object " + sharedResource + ", thread " + threadName);
////////////////////                    Thread.sleep(1000);
////////////////////                    isCurrentThreadInterrupted = Thread.currentThread().isInterrupted();
////////////////////                }
////////////////////            } catch (InterruptedException e) {
////////////////////            }
////////////////////        }
////////////////////    }
////////////////////}
//////////////////////import java.util.ArrayList;
//////////////////////import java.util.List;
//////////////////////
//////////////////////public class Solution {
//////////////////////    public static byte threadCount = 3;
//////////////////////    static List<Thread> threads = new ArrayList<>(threadCount);
//////////////////////
//////////////////////    public static class Water implements Runnable {
//////////////////////        private String sharedResource;
//////////////////////
//////////////////////        public Water(String sharedResource) {
//////////////////////            this.sharedResource = sharedResource;
//////////////////////        }
//////////////////////
//////////////////////        public void run() {
//////////////////////            boolean isCurrentThreadInterrupted = false;
//////////////////////            String threadName = Thread.currentThread().getName();
//////////////////////
//////////////////////            try {
//////////////////////                while(!isCurrentThreadInterrupted) {
//////////////////////                    System.out.println("Object " + sharedResource + ", thread " + threadName );
//////////////////////                    Thread.sleep(1000);
//////////////////////                    isCurrentThreadInterrupted = Thread.currentThread().isInterrupted();
//////////////////////                }
//////////////////////            } catch (InterruptedException e) {}
//////////////////////        }
//////////////////////    }
//////////////////////
//////////////////////    private static void initThreadsAndStart() {
//////////////////////        Water water = new Water("Water");
//////////////////////        for (int i = 0; i < threadCount; i++) {
//////////////////////            threads.add(new Thread(water, "#" + i));
//////////////////////        }
//////////////////////        for (int i = 0; i < threadCount; i++) {
//////////////////////            threads.get(i).start();
//////////////////////        }
//////////////////////    }
//////////////////////
//////////////////////    private static void outInterrupt() {
//////////////////////        threads.get(0).interrupt();
//////////////////////        threads.get(1).interrupt();
//////////////////////        threads.get(2).interrupt();
//////////////////////    }
//////////////////////
//////////////////////    public static void main(String[] args) throws InterruptedException {
//////////////////////        initThreadsAndStart();
//////////////////////        Thread.sleep(3000);
//////////////////////        outInterrupt();
//////////////////////    }
//////////////////////
//////////////////////}
//////////////////////
////////////////////////
////////////////////////public class Solution {
////////////////////////    private static boolean isCancel;
////////////////////////
////////////////////////    public static void outInterrupt() {
////////////////////////        isCancel = true;
////////////////////////    }
////////////////////////
////////////////////////    public static class TestThread implements Runnable {
////////////////////////
////////////////////////        @Override
////////////////////////        public void run() {
////////////////////////            while(!isCancel) {
////////////////////////                try {
////////////////////////                    System.out.println("he-he");
////////////////////////                    Thread.sleep(500);
////////////////////////                } catch (InterruptedException e) {}
////////////////////////            }
////////////////////////        }
////////////////////////    }
////////////////////////
////////////////////////    public static void main(String[] args) throws InterruptedException{
////////////////////////        Thread t = new Thread(new TestThread());
////////////////////////        t.start();
////////////////////////        Thread.sleep(3000);
////////////////////////        outInterrupt();
////////////////////////    }
////////////////////////}
////////////////////////
////////////////////////
//////////////////////////public class Solution {
//////////////////////////    /*
//////////////////////////    Another Interruption
//////////////////////////     */
//////////////////////////    public static class TestThread extends Thread {
//////////////////////////        @Override
//////////////////////////        public void run() {
//////////////////////////            super.run();
//////////////////////////            System.out.println("Oh Hai, Mark!!!");
//////////////////////////        }
//////////////////////////    }
//////////////////////////
//////////////////////////    public static void main(String[] args) throws InterruptedException{
//////////////////////////        TestThread testThread = new TestThread();
//////////////////////////        testThread.start();
//////////////////////////        System.out.println("before Interrupt");
//////////////////////////        testThread.interrupt();
//////////////////////////        System.out.println("after interrupt");
//////////////////////////    }
//////////////////////////}
//////////////////////////
//////////////////////////
//////////////////////////
//////////////////////////
////////////////////////////public class Solution {
////////////////////////////    public static volatile int numSeconds = 3;
//////////////////////////////    public static volatile int numSeconds = 4;
////////////////////////////
////////////////////////////    public static void main(String[] args) throws InterruptedException {
////////////////////////////        RacingClock clock = new RacingClock();
////////////////////////////        //write your code here
////////////////////////////        Thread.sleep(3500);
////////////////////////////        clock.interrupt();
////////////////////////////    }
////////////////////////////
////////////////////////////    public static class RacingClock extends Thread {
////////////////////////////        public RacingClock() {
////////////////////////////            start();
////////////////////////////        }
////////////////////////////
////////////////////////////        public void run() {
////////////////////////////            //write your code here
////////////////////////////            if (numSeconds < 3.5) {
////////////////////////////                while(numSeconds >=0) {
////////////////////////////                    try {
////////////////////////////                        Thread.sleep(1000);
////////////////////////////                        if(numSeconds ==0) {
////////////////////////////                            System.out.print("Go!");
////////////////////////////                        } else {
////////////////////////////                            System.out.print(numSeconds+" ");
////////////////////////////                        }
////////////////////////////                        numSeconds--;
////////////////////////////                    } catch (InterruptedException e) {
////////////////////////////                        e.printStackTrace();
////////////////////////////                    }
////////////////////////////                }
////////////////////////////            } else {
////////////////////////////                while(numSeconds >=0) {
////////////////////////////                    try {
////////////////////////////                        Thread.sleep(1000);
////////////////////////////                        if(numSeconds ==0) {
////////////////////////////                            System.out.print("Interrupted!");
////////////////////////////                        } else {
////////////////////////////                            System.out.print(numSeconds+" ");
////////////////////////////                        }
////////////////////////////                        numSeconds--;
////////////////////////////                    } catch (InterruptedException e) {
////////////////////////////                        e.printStackTrace();
////////////////////////////                    }
////////////////////////////                }
////////////////////////////            }
////////////////////////////        }
////////////////////////////    }
////////////////////////////}
////////////////////////////
////////////////////////////
////////////////////////////
//////////////////////////////public class Solution {
//////////////////////////////    public static volatile int numSeconds = 3;
//////////////////////////////
//////////////////////////////    public static class RagingClock extends Thread {
//////////////////////////////        public RagingClock() {
//////////////////////////////            start();
//////////////////////////////        }
//////////////////////////////        public void run() {
//////////////////////////////            if (numSeconds < 3.5) {
//////////////////////////////                while (numSeconds >= 0) {
//////////////////////////////                    try {
//////////////////////////////                        Thread.sleep(1000);
//////////////////////////////                        if (numSeconds == 0) {
//////////////////////////////                            System.out.print("Go!");
//////////////////////////////                        } else {
//////////////////////////////                            System.out.print(numSeconds + " ");
//////////////////////////////                        }
//////////////////////////////                        numSeconds--;
//////////////////////////////                    } catch (InterruptedException e) {
//////////////////////////////                        e.printStackTrace();
//////////////////////////////                    }
//////////////////////////////                }
//////////////////////////////            } else {
//////////////////////////////                while (numSeconds >= 0) {
//////////////////////////////                    try {
//////////////////////////////                        Thread.sleep(1000);
//////////////////////////////                        if (numSeconds == 0) {
//////////////////////////////                            System.out.print("Interrupted!");
//////////////////////////////                        } else {
//////////////////////////////                            System.out.print(numSeconds + " ");
//////////////////////////////                        }
//////////////////////////////                        numSeconds--;
//////////////////////////////                    } catch (InterruptedException e) {
//////////////////////////////                        e.printStackTrace();
//////////////////////////////                    }
//////////////////////////////                }
//////////////////////////////            }
//////////////////////////////        }
//////////////////////////////    }
//////////////////////////////    public static void main(String[] args) throws InterruptedException {
//////////////////////////////        RagingClock clock = new RagingClock();
//////////////////////////////        Thread.sleep(1000);
//////////////////////////////        clock.interrupt();
//////////////////////////////    }
//////////////////////////////}
//////////////////////////////
//////////////////////////////
////////////////////////////////import java.io.BufferedReader;
////////////////////////////////import java.io.IOException;
////////////////////////////////import java.io.InputStreamReader;
////////////////////////////////
////////////////////////////////public class Solution {
////////////////////////////////    // Counting seconds
////////////////////////////////    public static void main(String[] args) throws IOException {
////////////////////////////////        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
////////////////////////////////        // Create and run thread
////////////////////////////////        Stopwatch stopwatch = new Stopwatch();
////////////////////////////////        stopwatch.start();
////////////////////////////////        // read a string
////////////////////////////////        reader.readLine();
////////////////////////////////        stopwatch.interrupt();
////////////////////////////////        // close streams
////////////////////////////////        reader.close();
////////////////////////////////
////////////////////////////////    }
////////////////////////////////}
////////////////////////////////
//////////////////////////////////public class Solution {
//////////////////////////////////
//////////////////////////////////    public static void main(String[] args) throws InterruptedException {
//////////////////////////////////        Clock clock =  new Clock();
//////////////////////////////////        Thread clockThread = new Thread(clock);
//////////////////////////////////        clockThread.start();
//////////////////////////////////
//////////////////////////////////        Thread.sleep(10000);
//////////////////////////////////        clockThread.interrupt();
//////////////////////////////////    }
//////////////////////////////////}
//////////////////////////////////
////////////////////////////////////public class Solution {
////////////////////////////////////    // i still need to understand the use of synchronized and this
////////////////////////////////////    public static volatile Runway RUNWAY = new Runway();
////////////////////////////////////
////////////////////////////////////    public static class Runway {
////////////////////////////////////        private Thread t;
////////////////////////////////////
////////////////////////////////////        public Thread getCurrentPlane() {
////////////////////////////////////            return t;
////////////////////////////////////        }
////////////////////////////////////
////////////////////////////////////        public void setCurrentPlane(Thread t) {
////////////////////////////////////            synchronized (this) {
////////////////////////////////////                this.t = t;
////////////////////////////////////            }
////////////////////////////////////        }
////////////////////////////////////
////////////////////////////////////        public boolean trySetCurrentPlane(Thread t) {
////////////////////////////////////            synchronized (this) {
////////////////////////////////////                if (this.t == null) {
////////////////////////////////////                    this.t = t;
////////////////////////////////////                    return true;
////////////////////////////////////                }
////////////////////////////////////                return false;
////////////////////////////////////            }
////////////////////////////////////        }
////////////////////////////////////    }
////////////////////////////////////
////////////////////////////////////    private static void waitForTakeoff() {
////////////////////////////////////        try {
////////////////////////////////////            Thread.sleep(100);
////////////////////////////////////        } catch (InterruptedException e) {
////////////////////////////////////            e.printStackTrace();
////////////////////////////////////        }
////////////////////////////////////    }
////////////////////////////////////
////////////////////////////////////    private static void takeOff() {
////////////////////////////////////        try {
////////////////////////////////////            Thread.sleep(100);
////////////////////////////////////        } catch (InterruptedException ignored) {}
////////////////////////////////////    }
////////////////////////////////////
////////////////////////////////////    public static class Plane extends Thread {
////////////////////////////////////        public Plane(String name) {
////////////////////////////////////            super(name);
////////////////////////////////////            start();
////////////////////////////////////        }
////////////////////////////////////
////////////////////////////////////        public void run() {
////////////////////////////////////            boolean hasAlreadyTakenOff = false;
////////////////////////////////////            while(!hasAlreadyTakenOff) {
////////////////////////////////////                if (RUNWAY.trySetCurrentPlane(this)) {
////////////////////////////////////                    System.out.println(getName() + " is flying");
////////////////////////////////////                    takeOff();
////////////////////////////////////                    System.out.println(getName() + " in the sky");
////////////////////////////////////                    hasAlreadyTakenOff = true;
////////////////////////////////////                    RUNWAY.setCurrentPlane(null);
////////////////////////////////////                } else if(!this.equals(RUNWAY.getCurrentPlane())) {
////////////////////////////////////                    System.out.println(getName() + " is waiting");
////////////////////////////////////                    waitForTakeoff();
////////////////////////////////////                }
////////////////////////////////////            }
////////////////////////////////////        }
////////////////////////////////////    }
////////////////////////////////////
////////////////////////////////////    public static void main(String[] args) {
////////////////////////////////////        Plane plane1 = new Plane("Plane #1");
////////////////////////////////////        Plane plane2 = new Plane("Plane #2");
////////////////////////////////////        Plane plane3 = new Plane("Plane #3");
////////////////////////////////////    }
////////////////////////////////////}
////////////////////////////////////
//////////////////////////////////////import java.util.ArrayList;
//////////////////////////////////////import java.util.List;
//////////////////////////////////////
//////////////////////////////////////public class Solution {
//////////////////////////////////////    // Countdown. not final
//////////////////////////////////////    public static volatile List<String> list = new ArrayList<>(5);
//////////////////////////////////////
//////////////////////////////////////    static {
//////////////////////////////////////        for (int i = 0; i < 5; i++) {
//////////////////////////////////////            list.add("Line " + i);
//////////////////////////////////////        }
//////////////////////////////////////    }
//////////////////////////////////////
//////////////////////////////////////    public static void main(String[] args) {
//////////////////////////////////////        Thread t =  new Thread(new Countdown(3), "Countdown");
//////////////////////////////////////        t.start();
//////////////////////////////////////    }
//////////////////////////////////////
//////////////////////////////////////    public static class Countdown implements Runnable {
//////////////////////////////////////        private int countFrom;
//////////////////////////////////////
//////////////////////////////////////        public Countdown(int countFrom) {
//////////////////////////////////////            this.countFrom = countFrom;
//////////////////////////////////////        }
//////////////////////////////////////
//////////////////////////////////////        public void run() {
//////////////////////////////////////            try {
//////////////////////////////////////                while (countFrom > 0) {
//////////////////////////////////////                    printCountdown();
//////////////////////////////////////                }
//////////////////////////////////////            } catch (InterruptedException e) {}
//////////////////////////////////////        }
//////////////////////////////////////        public void printCountdown() throws InterruptedException {
//////////////////////////////////////            Thread.sleep(500);
//////////////////////////////////////            countFrom--;
//////////////////////////////////////            System.out.println(list.get(countFrom));
//////////////////////////////////////        }
//////////////////////////////////////    }
//////////////////////////////////////}
//////////////////////////////////////
////////////////////////////////////////public class Solution {
////////////////////////////////////////    /*
////////////////////////////////////////    Big Ben
////////////////////////////////////////    */
////////////////////////////////////////
////////////////////////////////////////    public static volatile boolean isStopped = false;
////////////////////////////////////////
////////////////////////////////////////    public static class Clock extends Thread {
////////////////////////////////////////        private String cityName;
////////////////////////////////////////        private int hours;
////////////////////////////////////////        private int minutes;
////////////////////////////////////////        private int seconds;
////////////////////////////////////////
////////////////////////////////////////        public Clock(String cityName, int hours, int minutes, int seconds) {
////////////////////////////////////////            this.cityName = cityName;
////////////////////////////////////////            this.hours = hours;
////////////////////////////////////////            this.minutes = minutes;
////////////////////////////////////////            this.seconds = seconds;
////////////////////////////////////////            start();
////////////////////////////////////////        }
////////////////////////////////////////
////////////////////////////////////////        public void run() {
////////////////////////////////////////            try {
////////////////////////////////////////                while(!isStopped) {
////////////////////////////////////////                    printTime();
////////////////////////////////////////                }
////////////////////////////////////////            } catch (InterruptedException e) {
////////////////////////////////////////
////////////////////////////////////////            }
////////////////////////////////////////
////////////////////////////////////////        }
////////////////////////////////////////
////////////////////////////////////////        private void printTime() throws InterruptedException {
////////////////////////////////////////            Thread.sleep(1000);
////////////////////////////////////////            this.seconds +=1;
////////////////////////////////////////            if (this.seconds == 60) {
////////////////////////////////////////                this.seconds = 0;
////////////////////////////////////////                this.minutes +=1;
////////////////////////////////////////            }
////////////////////////////////////////            if (this.minutes == 60) {
////////////////////////////////////////                this.minutes = 0;
////////////////////////////////////////                this.hours += 1;
////////////////////////////////////////            }
////////////////////////////////////////            if(this.hours == 24) {
////////////////////////////////////////                this.hours = 0;
////////////////////////////////////////            }
////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////            if (hours == 0 && minutes == 0 && seconds == 0) {
////////////////////////////////////////                System.out.println(String.format("It's currently midnight in %s!", cityName));
////////////////////////////////////////            } else {
////////////////////////////////////////                System.out.println(String.format("In %s, the time is now %02d:%02d:%02d!", cityName, hours, minutes, seconds));
////////////////////////////////////////            }
////////////////////////////////////////        }
////////////////////////////////////////    }
////////////////////////////////////////    public static void main(String[] args) throws InterruptedException {
////////////////////////////////////////        Clock clock = new Clock("London", 23, 59, 57);
////////////////////////////////////////        Thread.sleep(4000);
////////////////////////////////////////        isStopped = true;
////////////////////////////////////////        Thread.sleep(1000);
////////////////////////////////////////    }
////////////////////////////////////////}
////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////
//////////////////////////////////////////
//////////////////////////////////////////public class Solution {
//////////////////////////////////////////    public static volatile boolean isStopped = false;
//////////////////////////////////////////
//////////////////////////////////////////    public static class Stopwatch extends Thread {
//////////////////////////////////////////        private Runner owner;
//////////////////////////////////////////        private int stepNumber;
//////////////////////////////////////////
//////////////////////////////////////////        public Stopwatch(Runner runner) {
//////////////////////////////////////////            this.owner =  runner;
//////////////////////////////////////////        }
//////////////////////////////////////////
//////////////////////////////////////////        public void run() {
//////////////////////////////////////////            try {
//////////////////////////////////////////                while(!isStopped) {
//////////////////////////////////////////                    doStep();
//////////////////////////////////////////                }
//////////////////////////////////////////            } catch (InterruptedException e) {}
//////////////////////////////////////////        }
//////////////////////////////////////////
//////////////////////////////////////////        private void doStep() throws InterruptedException {
//////////////////////////////////////////            stepNumber++;
//////////////////////////////////////////            Thread.sleep(1000/owner.getSpeed());
//////////////////////////////////////////            System.out.println(owner.getName() + " takes step " + stepNumber + "!");
//////////////////////////////////////////        }
//////////////////////////////////////////    }
//////////////////////////////////////////
//////////////////////////////////////////    public static class Runner {
//////////////////////////////////////////        Stopwatch stopwatch;
//////////////////////////////////////////        private String name;
//////////////////////////////////////////        private int speed;
//////////////////////////////////////////
//////////////////////////////////////////        public Runner(String name, int speed) {
//////////////////////////////////////////            this.name = name;
//////////////////////////////////////////            this.speed = speed;
//////////////////////////////////////////            this.stopwatch = new Stopwatch(this);
//////////////////////////////////////////        }
//////////////////////////////////////////
//////////////////////////////////////////        public String getName() {
//////////////////////////////////////////            return name;
//////////////////////////////////////////        }
//////////////////////////////////////////
//////////////////////////////////////////        public int getSpeed() {
//////////////////////////////////////////            return speed;
//////////////////////////////////////////        }
//////////////////////////////////////////
//////////////////////////////////////////        public void start() {
//////////////////////////////////////////            stopwatch.start();
//////////////////////////////////////////        }
//////////////////////////////////////////    }
//////////////////////////////////////////}
//////////////////////////////////////////
//////////////////////////////////////////
//////////////////////////////////////////
////////////////////////////////////////////public class Solution {
////////////////////////////////////////////    public static volatile boolean isStopped = false;
////////////////////////////////////////////
////////////////////////////////////////////    public static class Clock extends Thread {
////////////////////////////////////////////        public Clock() {
////////////////////////////////////////////            setPriority(MAX_PRIORITY);
////////////////////////////////////////////            start();
////////////////////////////////////////////        }
////////////////////////////////////////////
////////////////////////////////////////////        public void run() {
////////////////////////////////////////////            try {
////////////////////////////////////////////                while (!isStopped) {
////////////////////////////////////////////                    printTickTock();
////////////////////////////////////////////                }
////////////////////////////////////////////            } catch (InterruptedException e) {}
////////////////////////////////////////////        }
////////////////////////////////////////////
////////////////////////////////////////////        private void printTickTock() throws InterruptedException {
////////////////////////////////////////////            Thread.sleep(500);
////////////////////////////////////////////            System.out.println("Tick");
////////////////////////////////////////////            Thread.sleep(500);
////////////////////////////////////////////            System.out.println("Tock");
////////////////////////////////////////////        }
////////////////////////////////////////////    }
////////////////////////////////////////////
////////////////////////////////////////////    public static void main(String[] args) throws InterruptedException {
////////////////////////////////////////////        Clock clock = new Clock();
////////////////////////////////////////////        Thread.sleep(500);
////////////////////////////////////////////        isStopped = true;
////////////////////////////////////////////        System.out.println("The Clock has to be stopped");
////////////////////////////////////////////        Thread.sleep(2000);
////////////////////////////////////////////        System.out.println("Double-check");
////////////////////////////////////////////    }
////////////////////////////////////////////}
////////////////////////////////////////////
////////////////////////////////////////////
//////////////////////////////////////////////public class Solution {
//////////////////////////////////////////////    public static void main(String[] args) throws InterruptedException {
////////////////////////////////////////////////        Thread.sleep(100);
////////////////////////////////////////////////        System.out.println("Oh");
////////////////////////////////////////////////        Thread.sleep(1000);
////////////////////////////////////////////////        System.out.println("Hi");
////////////////////////////////////////////////        Thread.sleep(1000);
////////////////////////////////////////////////        System.out.println("Mark");
//////////////////////////////////////////////        while (true) {
//////////////////////////////////////////////            Thread.sleep(500);
//////////////////////////////////////////////            System.out.println("Tick");
//////////////////////////////////////////////        }
//////////////////////////////////////////////    }
//////////////////////////////////////////////}
//////////////////////////////////////////////
//////////////////////////////////////////////
/////////////////////////////////////////////////*
////////////////////////////////////////////////https://codegym.cc/quests/lectures/questcore.level06.lecture05
////////////////////////////////////////////////12/26/2021 stopped at typing up Horse racing task
////////////////////////////////////////////////* */
////////////////////////////////////////////////
////////////////////////////////////////////////
/////////////////////////////////////////////////*
////////////////////////////////////////////////Horse racing
////////////////////////////////////////////////task 1607
//////////////////////////////////////////////// */
////////////////////////////////////////////////
////////////////////////////////////////////////import java.util.ArrayList;
////////////////////////////////////////////////import java.util.List;
////////////////////////////////////////////////
////////////////////////////////////////////////public class Solution {
////////////////////////////////////////////////    public static class Horse extends Thread {
////////////////////////////////////////////////        private boolean isFinished;
////////////////////////////////////////////////        // constructor
////////////////////////////////////////////////        public Horse(String name) {
////////////////////////////////////////////////            super(name);
////////////////////////////////////////////////        }
////////////////////////////////////////////////
////////////////////////////////////////////////        public boolean isFinished() {
////////////////////////////////////////////////            return isFinished;
////////////////////////////////////////////////        }
////////////////////////////////////////////////
////////////////////////////////////////////////        public void run() {
////////////////////////////////////////////////            String s = "";
////////////////////////////////////////////////            for(int i = 0; i < 1001; i++) {
////////////////////////////////////////////////                s += "" + i;
////////////////////////////////////////////////                if (i == 1000) {
////////////////////////////////////////////////                    s = " has finished the race!";
////////////////////////////////////////////////                    System.out.println(getName() + s);
////////////////////////////////////////////////                    isFinished = true;
////////////////////////////////////////////////                }
////////////////////////////////////////////////            }
////////////////////////////////////////////////        }
////////////////////////////////////////////////    }
////////////////////////////////////////////////
////////////////////////////////////////////////    public static List<Horse> prepareHorsesAndStart(int horseCount) {
////////////////////////////////////////////////        List<Horse> horses = new ArrayList<>(horseCount);
////////////////////////////////////////////////        String number;
////////////////////////////////////////////////        for(int i = 1; i < horseCount + 1; i++) {
////////////////////////////////////////////////            number = i < 10 ? ("0" + i) : "" + i;
////////////////////////////////////////////////            horses.add(new Horse("Horse_" + number));
////////////////////////////////////////////////        }
////////////////////////////////////////////////        for (int i = 0; i < horseCount; i++) {
////////////////////////////////////////////////            horses.get(i).start();
////////////////////////////////////////////////        }
////////////////////////////////////////////////        return horses;
////////////////////////////////////////////////    }
////////////////////////////////////////////////
////////////////////////////////////////////////    public static int calculateHorsesFinished(List<Horse> horses) throws InterruptedException {
////////////////////////////////////////////////        int finishedCount = 0;
////////////////////////////////////////////////        for(Horse horse: horses) {
////////////////////////////////////////////////            if(!horse.isFinished()) {
////////////////////////////////////////////////                System.out.println("Waiting for " + horse.getName());
////////////////////////////////////////////////                horse.join();
////////////////////////////////////////////////            } else {
////////////////////////////////////////////////                finishedCount +=1;
////////////////////////////////////////////////            }
////////////////////////////////////////////////        }
////////////////////////////////////////////////        return finishedCount;
////////////////////////////////////////////////    }
////////////////////////////////////////////////
////////////////////////////////////////////////    public static void main(String[] args) throws InterruptedException {
////////////////////////////////////////////////        List<Horse> horses =  prepareHorsesAndStart(10);
////////////////////////////////////////////////        while (calculateHorsesFinished(horses) != horses.size()) {
////////////////////////////////////////////////            System.out.println("not everyone is finished");
////////////////////////////////////////////////        }
////////////////////////////////////////////////    }
////////////////////////////////////////////////}
//////////////////////////////////////////////
//////////////////////////////////////////////
/////////////////////////////////////////////////*
////////////////////////////////////////////////No interrupt, no dice?
////////////////////////////////////////////////code gym task 1619
////////////////////////////////////////////////*/
////////////////////////////////////////////////
////////////////////////////////////////////////public class Solution {
////////////////////////////////////////////////    private static boolean isCancel;
////////////////////////////////////////////////    //    private boolean isCancel = false;
////////////////////////////////////////////////    public static void main(String[] args) throws InterruptedException {
////////////////////////////////////////////////        Thread t = new Thread(new TestThread());
////////////////////////////////////////////////        t.start();
////////////////////////////////////////////////        Thread.sleep(3000);
////////////////////////////////////////////////        ourInterrupt();
////////////////////////////////////////////////    }
////////////////////////////////////////////////
////////////////////////////////////////////////    public static void ourInterrupt() {
////////////////////////////////////////////////        isCancel = true;
////////////////////////////////////////////////    }
////////////////////////////////////////////////
////////////////////////////////////////////////    public static class TestThread implements Runnable {
////////////////////////////////////////////////        public void run() {
////////////////////////////////////////////////            while (!isCancel) {
////////////////////////////////////////////////                try {
////////////////////////////////////////////////                    System.out.println("he-he");
////////////////////////////////////////////////                    Thread.sleep(500);
////////////////////////////////////////////////                } catch (InterruptedException e) {
////////////////////////////////////////////////                }
////////////////////////////////////////////////            }
////////////////////////////////////////////////        }
////////////////////////////////////////////////    }
////////////////////////////////////////////////}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
//////////////////////////////////////////////////import java.util.ArrayList;
//////////////////////////////////////////////////import java.util.List;
//////////////////////////////////////////////////
//////////////////////////////////////////////////public class Solution {
//////////////////////////////////////////////////    public static byte threadCount = 3;
//////////////////////////////////////////////////    static List<Thread> threads = new ArrayList<>(threadCount);
//////////////////////////////////////////////////
//////////////////////////////////////////////////    public static void main(String[] args) {
//////////////////////////////////////////////////
//////////////////////////////////////////////////    }
//////////////////////////////////////////////////
//////////////////////////////////////////////////    public static void ourInterrupt() {
//////////////////////////////////////////////////        threads.get(0).interrupt();
//////////////////////////////////////////////////        threads.get(1).interrupt();
//////////////////////////////////////////////////        threads.get(2).interrupt();
//////////////////////////////////////////////////    }
//////////////////////////////////////////////////
//////////////////////////////////////////////////    public static void initThreadsAndStart() {
//////////////////////////////////////////////////        Water water = new Water("water");
//////////////////////////////////////////////////        for(int i = 0; i < threadCount; i++) {
//////////////////////////////////////////////////            threads.add(new Thread(water, "#" + i));
//////////////////////////////////////////////////        }
//////////////////////////////////////////////////        for(int i = 0; i < threadCount; i++) {
//////////////////////////////////////////////////            threads.get(i).start();
//////////////////////////////////////////////////        }
//////////////////////////////////////////////////    }
//////////////////////////////////////////////////
//////////////////////////////////////////////////    public static class Water implements Runnable {
//////////////////////////////////////////////////        private String sharedResources;
//////////////////////////////////////////////////
//////////////////////////////////////////////////        public Water(String sharedResources) {
//////////////////////////////////////////////////            this.sharedResources = sharedResources;
//////////////////////////////////////////////////        }
//////////////////////////////////////////////////
//////////////////////////////////////////////////        public void run() {
//////////////////////////////////////////////////            boolean isCurrentThreadInterrupted = false;
//////////////////////////////////////////////////            String threadName =  Thread.currentThread().getName();
//////////////////////////////////////////////////
//////////////////////////////////////////////////            try {
//////////////////////////////////////////////////                while(!isCurrentThreadInterrupted) {
//////////////////////////////////////////////////                    System.out.println("Object " + sharedResources + ", thread " + threadName);
//////////////////////////////////////////////////                    Thread.sleep(1000);
//////////////////////////////////////////////////                    isCurrentThreadInterrupted =  Thread.currentThread().isInterrupted();
//////////////////////////////////////////////////                }
//////////////////////////////////////////////////            } catch (InterruptedException e) {}
//////////////////////////////////////////////////        }
//////////////////////////////////////////////////    }
//////////////////////////////////////////////////}
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
////////////////////////////////////////////////////import java.io.BufferedReader;
////////////////////////////////////////////////////import java.io.IOException;
////////////////////////////////////////////////////import java.io.InputStreamReader;
////////////////////////////////////////////////////
////////////////////////////////////////////////////public class Solution {
////////////////////////////////////////////////////    /*
////////////////////////////////////////////////////    Counting Seconds
////////////////////////////////////////////////////    Codegym task 1616
////////////////////////////////////////////////////     */
////////////////////////////////////////////////////    public static void main(String[] args) throws IOException {
////////////////////////////////////////////////////        InputStreamReader in =  new InputStreamReader(System.in);
////////////////////////////////////////////////////        BufferedReader reader = new BufferedReader(in);
////////////////////////////////////////////////////        // Create and run thread
////////////////////////////////////////////////////        Stopwatch stopwatch = new Stopwatch();
////////////////////////////////////////////////////        stopwatch.start();
////////////////////////////////////////////////////        // Read a string
////////////////////////////////////////////////////        reader.readLine();
////////////////////////////////////////////////////        stopwatch.interrupt();
////////////////////////////////////////////////////        // close streams
////////////////////////////////////////////////////        reader.close();
////////////////////////////////////////////////////        in.close();
////////////////////////////////////////////////////    }
////////////////////////////////////////////////////
////////////////////////////////////////////////////    public static class Stopwatch extends Thread {
////////////////////////////////////////////////////        private int seconds;
////////////////////////////////////////////////////
////////////////////////////////////////////////////        public void run() {
////////////////////////////////////////////////////            try {
////////////////////////////////////////////////////                while(true) {
////////////////////////////////////////////////////                    Thread.sleep(1000);
////////////////////////////////////////////////////                    seconds++;
////////////////////////////////////////////////////                }
////////////////////////////////////////////////////            } catch (InterruptedException e) {
////////////////////////////////////////////////////                System.out.println(seconds);
////////////////////////////////////////////////////            }
////////////////////////////////////////////////////        }
////////////////////////////////////////////////////    }
////////////////////////////////////////////////////}
////////////////////////////////////////////////////
//////////////////////////////////////////////////////public class Solution {
//////////////////////////////////////////////////////    public static void main(String[] args) {
//////////////////////////////////////////////////////        System.out.println("Oh Hi Mark");
//////////////////////////////////////////////////////    }
//////////////////////////////////////////////////////}
